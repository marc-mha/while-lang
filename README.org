#+TITLE: README
#+AUTHOR: Marc Thompson
This is my attempt at writing an implementation of the /While Language/, a computation model.

* The While Language
The /While Language/ is a computation model equivalent to Turing Machines or Lambda Calculus in its expression of computations.
This means that if you can write a program in a Turing Complete language, you can write it using the While Lanugage.

** Syntax
A syntax of the While Language can be expressed as follows
#+begin_src ebnf
S = v ":=" a | "skip" | S ";" S | "if" b "then" S "else" S | "while" b "do" S | "(" S ")" ;
b = "true" | "false" | a "=" a | a "<=" a | "~" b | b "&" b | "(" b ")" ;
a = v | n | a "+" a | a "-" a | a "*" a | "(" a ")" ;
#+end_src
Where ~v~ denotes a variable name, beginning with a letter then a sequence of letters and numbers, and ~n~ denotes a natural number.

** TODO Semantics
As a computation model, the While Language has a few transitions, similar to reductions in Lambda Calculus, that take in a configuration of program and state, and return a new configuration of program and state.

A /program/ is a statement, usually composed of other statements using the grammar rule ~S = S ";" S~.
These are the instructions that define a computation.

/State/ is a notion of the "state" of a program and can be thought of as a set of mappings from variables to values, in this case integers.
It is commonly represented with a $\sigma$.

* Example Program
In the folder ~examples/~ there are a number of example programs to demonstrate the syntax of the language.
We will focus on the program ~log2.whl~ which contains
#+begin_example
x := 20;
y := 1;
z := 0;
while (2 * y <= x) do (
  y := 2 * y;
  z := z + 1;
);
r := x - y;
#+end_example

** Description
This program computes a notion of the integer log base 2 of $x$ (by default 20) and the remainder, such that $x = 2^z + r$ holds.

** Execution
To run this program, you must first compile the program,
#+begin_src shell
cabal build
#+end_src
then run the program with the filename as an argument,
#+begin_src shell
cabal run exes -- examples/log2.whl
#+end_src
This should output the state of the program once it has terminated:
#+begin_example
$ cabal run exes -- examples/log2.whl
[ x |-> 20, y |-> 16, z |-> 4, r |-> 4 ]
#+end_example
From this, we see that $x = 2^4 + 4$.

* Implementation Quirks
These are some notes about quirks and inaccuracies in my implementation of the language I have described above:
- Spaces after "if" and "while" as well as spaces surrounding "then", "else" and "do" are required, even though the syntax above does not include them.
  - I just think this looks better.
- Terminating semi-colons are allowed, even though they are not strictly included in the language grammar I gave above.
  - This mimicks how they are used in conventional programming languages.
- +Sub-statements in /if/ and /while/ clauses must be surrounded in parentheses.+
  - +I might get around to removing this requirement but for now it makes parsing simpler when distinguishing between single statements and sequences of statements.+
  - You can now use single statements where expected in /if/ and /while/ clauses, e.g.,
    #+begin_example
    if x = 1 then skip else skip;
    #+end_example
